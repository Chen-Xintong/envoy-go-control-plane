// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: contrib/envoy/extensions/private_key_providers/sgx/v3alpha/sgx.proto

package v3alpha

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SgxPrivateKeyMethodConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the ctk library file.
	SgxLibrary string `protobuf:"bytes,1,opt,name=sgx_library,json=sgxLibrary,proto3" json:"sgx_library,omitempty"`
	// Label of the key pair.
	KeyLabel string `protobuf:"bytes,2,opt,name=key_label,json=keyLabel,proto3" json:"key_label,omitempty"`
	// User PIN.
	UsrPin string `protobuf:"bytes,3,opt,name=usr_pin,json=usrPin,proto3" json:"usr_pin,omitempty"`
	// Security Officer user Pin.
	SoPin string `protobuf:"bytes,4,opt,name=so_pin,json=soPin,proto3" json:"so_pin,omitempty"`
	// Label of the token.
	TokenLabel string `protobuf:"bytes,5,opt,name=token_label,json=tokenLabel,proto3" json:"token_label,omitempty"`
	// There are two stages for the sgx private key provider: `init` and `cert`.
	// If stage is `init`, it will create the key pair and CSR. Then it will return the CSR back.
	// If stage is `cert`, it will not create any new key pair. Instead, it will find the key pair which has been created.
	//   In this step, the final certificate will be send to Envoy.
	Stage string `protobuf:"bytes,6,opt,name=stage,proto3" json:"stage,omitempty"`
	// Type of the key pair in SGX enclave, `rsa` or `ecdsa`.
	KeyType string `protobuf:"bytes,7,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	// Key size of the RSA key. It will be used when `key_type` is `rsa`.
	RsaKeySize string `protobuf:"bytes,8,opt,name=rsa_key_size,json=rsaKeySize,proto3" json:"rsa_key_size,omitempty"`
	// The parameter for the ECDSA Key, for example: `P-256`. It will be used when `key_type` is `ecdsa`.
	EcdsaKeyParam string `protobuf:"bytes,9,opt,name=ecdsa_key_param,json=ecdsaKeyParam,proto3" json:"ecdsa_key_param,omitempty"`
	// The configs of CSR. We will generate CSR according to it.
	CsrConfig string `protobuf:"bytes,10,opt,name=csr_config,json=csrConfig,proto3" json:"csr_config,omitempty"`
	// It's the key of the extension in CSR. The value of the extension will be the quote.
	QuoteKey string `protobuf:"bytes,11,opt,name=quote_key,json=quoteKey,proto3" json:"quote_key,omitempty"`
	// It's the key of the extension in CSR. The value of the extension will be the quote public key.
	QuotepubKey string `protobuf:"bytes,12,opt,name=quotepub_key,json=quotepubKey,proto3" json:"quotepub_key,omitempty"`
	// Envoy will send CSR object to SDS-Server/Istio-Agent through this channel.
	SdsConfig *v3.ConfigSource `protobuf:"bytes,13,opt,name=sds_config,json=sdsConfig,proto3" json:"sds_config,omitempty"`
}

func (x *SgxPrivateKeyMethodConfig) Reset() {
	*x = SgxPrivateKeyMethodConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgxPrivateKeyMethodConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgxPrivateKeyMethodConfig) ProtoMessage() {}

func (x *SgxPrivateKeyMethodConfig) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgxPrivateKeyMethodConfig.ProtoReflect.Descriptor instead.
func (*SgxPrivateKeyMethodConfig) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescGZIP(), []int{0}
}

func (x *SgxPrivateKeyMethodConfig) GetSgxLibrary() string {
	if x != nil {
		return x.SgxLibrary
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetKeyLabel() string {
	if x != nil {
		return x.KeyLabel
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetUsrPin() string {
	if x != nil {
		return x.UsrPin
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetSoPin() string {
	if x != nil {
		return x.SoPin
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetTokenLabel() string {
	if x != nil {
		return x.TokenLabel
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetRsaKeySize() string {
	if x != nil {
		return x.RsaKeySize
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetEcdsaKeyParam() string {
	if x != nil {
		return x.EcdsaKeyParam
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetCsrConfig() string {
	if x != nil {
		return x.CsrConfig
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetQuoteKey() string {
	if x != nil {
		return x.QuoteKey
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetQuotepubKey() string {
	if x != nil {
		return x.QuotepubKey
	}
	return ""
}

func (x *SgxPrivateKeyMethodConfig) GetSdsConfig() *v3.ConfigSource {
	if x != nil {
		return x.SdsConfig
	}
	return nil
}

var File_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto protoreflect.FileDescriptor

var file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDesc = []byte{
	0x0a, 0x44, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x67, 0x78, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x67, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x67, 0x78, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x28, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x03, 0x0a, 0x19, 0x53, 0x67, 0x78, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x67, 0x78, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x67, 0x78, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x72, 0x50, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6f, 0x5f, 0x70,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x50, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x63,
	0x64, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x73, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x73, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0xac, 0x01,
	0x0a, 0x3b, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x67, 0x78, 0x2e, 0x76, 0x33, 0x42, 0x08, 0x53,
	0x67, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x67, 0x78, 0x2f, 0x76, 0x33, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescOnce sync.Once
	file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescData = file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDesc
)

func file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescGZIP() []byte {
	file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescOnce.Do(func() {
		file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescData = protoimpl.X.CompressGZIP(file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescData)
	})
	return file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDescData
}

var file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_goTypes = []interface{}{
	(*SgxPrivateKeyMethodConfig)(nil), // 0: envoy.extensions.private_key_providers.sgx.v3alpha.SgxPrivateKeyMethodConfig
	(*v3.ConfigSource)(nil),           // 1: envoy.config.core.v3.ConfigSource
}
var file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.private_key_providers.sgx.v3alpha.SgxPrivateKeyMethodConfig.sds_config:type_name -> envoy.config.core.v3.ConfigSource
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_init() }
func file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_init() {
	if File_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SgxPrivateKeyMethodConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_goTypes,
		DependencyIndexes: file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_depIdxs,
		MessageInfos:      file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_msgTypes,
	}.Build()
	File_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto = out.File
	file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_rawDesc = nil
	file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_goTypes = nil
	file_contrib_envoy_extensions_private_key_providers_sgx_v3alpha_sgx_proto_depIdxs = nil
}
